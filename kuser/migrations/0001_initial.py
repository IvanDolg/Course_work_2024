# Generated by Django 2.2.12 on 2024-11-27 15:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'My user',
                'verbose_name_plural': 'My users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Decision',
                'verbose_name_plural': 'Decision',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Department')),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Department',
            },
        ),
        migrations.CreateModel(
            name='LibraryCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('number', models.CharField(blank=True, help_text='Generated automatically', max_length=16, null=True, verbose_name='The number of the library card')),
                ('date_from', models.DateField(blank=True, help_text='Date of the library card (from)', null=True, verbose_name='Date of issue')),
                ('date_to', models.DateField(blank=True, help_text='The validity period of the library card (up to)', null=True, verbose_name='Validity period')),
                ('status', models.CharField(choices=[('WORKS', 'Работает'), ('DISMISSED', 'Уволен')], default='ACTIVE', max_length=16, verbose_name='The status of the library card')),
                ('stopped_from', models.DateField(blank=True, help_text='Date of the beginning of the suspension of the library card (from)', null=True, verbose_name='Date of suspension')),
                ('stopped_to', models.DateField(blank=True, help_text='The end date of the suspension of the library card (before)', null=True, verbose_name='The period of suspension')),
            ],
            options={
                'verbose_name': 'Library card',
                'verbose_name_plural': 'Library cards',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Organization')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Position')),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
            },
        ),
        migrations.CreateModel(
            name='Reregistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('text', models.TextField(default='Уважаемый пользователь, для работы с системой вам необходимо перерегистрироваться. Нажмите кнопку справа.', max_length=1000, verbose_name='')),
            ],
            options={
                'verbose_name': 'Reregistration',
                'verbose_name_plural': 'Reregistration',
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('registration_date', models.DateField(max_length=10, verbose_name='Registration date')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='Middle name')),
                ('birth_date', models.DateField(blank=True, max_length=10, null=True, verbose_name='Date of birth')),
                ('education', models.CharField(choices=[('general-average', 'Общее среднее'), ('secondary_special', 'Средне-специальное'), ('higher', 'Высшее'), ('vocational-training', 'Профессионально-техническое')], max_length=30, verbose_name='Education')),
                ('id_number', models.CharField(max_length=50, verbose_name='Id number')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone')),
                ('library', models.CharField(choices=[('Scientific and Technical Library', 'Научно-техническая библиотека'), ('Technical Library of the Minsk Branch', 'Техническая библиотека Минского отделения'), ('Technical Library of the Baranovichi branch', 'Техническая библиотека Барановичского отделения'), ('Technical Library of the Brest branch', 'Техническая библиотека Брестского отделения'), ('Technical Library of the Gomel branch', 'Техническая библиотека Гомельского отделения'), ('Technical Library of the Mogilev branch', 'Техническая библиотека Могилевского отделения'), ('Technical Library of the Vitebsk Branch', 'Техническая библиотека Витебского отделения'), ('Orsha Library Point', 'Библиотечный пункт Орша'), ('Library point Molodechno', 'Библиотечный пункт Молодечно'), ('Luninets Library Point', 'Библиотечный пункт Лунинец'), ('Library point Volkovysk', 'Библиотечный пункт Волковыск'), ('Library point of the Brest Locomotive Depot', 'Библиотечный пункт Локомотивного депо Брест'), ('Zhlobin Library Point', 'Библиотечный пункт Жлобин'), ('Kalinkovichi Library Point', 'Библиотечный пункт Калинковичи'), ('Osipovichi Library Point', 'Библиотечный пункт Осиповичи'), ('Polotsk Library Center', 'Библиотечный пункт Полоцк')], max_length=75, verbose_name='Library')),
                ('subscriber', models.BooleanField(default=False, verbose_name='Subscriber')),
                ('reading_room', models.BooleanField(default=False, verbose_name='Reading room')),
                ('kp', models.BooleanField(default=False, verbose_name='KP')),
                ('mba', models.BooleanField(default=False, verbose_name='MDA')),
                ('zdd', models.BooleanField(default=False, verbose_name='ZDD')),
                ('iri', models.BooleanField(default=False, verbose_name='IRI')),
                ('all_services', models.BooleanField(default=False, verbose_name='All services')),
                ('notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Notes')),
                ('exclusion', models.BooleanField(default=False, verbose_name='Exclusion')),
                ('worker_status', models.CharField(choices=[('WORKS', 'Работает'), ('DISMISSED', 'Уволен')], default='WORKS', max_length=100, verbose_name='Worker status')),
                ('validity_period', models.DateField(blank=True, max_length=10, null=True, verbose_name='Validity period')),
                ('position', models.CharField(max_length=100, verbose_name='Position')),
                ('role', models.CharField(choices=[('system_administrator', 'Системный администратор'), ('chief_information_administrator', 'Главный информационный администратор'), ('information_administrator', 'Информационный администратор'), ('employees_of_tb_bjd', 'Работники ТБ БЖД')], max_length=100, verbose_name='Role')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='worker', to=settings.AUTH_USER_MODEL, verbose_name='Account')),
            ],
            options={
                'verbose_name': 'Worker',
                'verbose_name_plural': 'Workers',
            },
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('registration_date', models.DateField(max_length=10, verbose_name='Registration date')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='Middle name')),
                ('birth_date', models.DateField(blank=True, max_length=10, null=True, verbose_name='Date of birth')),
                ('education', models.CharField(choices=[('general-average', 'Общее среднее'), ('secondary_special', 'Средне-специальное'), ('higher', 'Высшее'), ('vocational-training', 'Профессионально-техническое')], max_length=30, verbose_name='Education')),
                ('id_number', models.CharField(max_length=50, verbose_name='Id number')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone')),
                ('library', models.CharField(choices=[('Scientific and Technical Library', 'Научно-техническая библиотека'), ('Technical Library of the Minsk Branch', 'Техническая библиотека Минского отделения'), ('Technical Library of the Baranovichi branch', 'Техническая библиотека Барановичского отделения'), ('Technical Library of the Brest branch', 'Техническая библиотека Брестского отделения'), ('Technical Library of the Gomel branch', 'Техническая библиотека Гомельского отделения'), ('Technical Library of the Mogilev branch', 'Техническая библиотека Могилевского отделения'), ('Technical Library of the Vitebsk Branch', 'Техническая библиотека Витебского отделения'), ('Orsha Library Point', 'Библиотечный пункт Орша'), ('Library point Molodechno', 'Библиотечный пункт Молодечно'), ('Luninets Library Point', 'Библиотечный пункт Лунинец'), ('Library point Volkovysk', 'Библиотечный пункт Волковыск'), ('Library point of the Brest Locomotive Depot', 'Библиотечный пункт Локомотивного депо Брест'), ('Zhlobin Library Point', 'Библиотечный пункт Жлобин'), ('Kalinkovichi Library Point', 'Библиотечный пункт Калинковичи'), ('Osipovichi Library Point', 'Библиотечный пункт Осиповичи'), ('Polotsk Library Center', 'Библиотечный пункт Полоцк')], max_length=75, verbose_name='Library')),
                ('subscriber', models.BooleanField(default=False, verbose_name='Subscriber')),
                ('reading_room', models.BooleanField(default=False, verbose_name='Reading room')),
                ('kp', models.BooleanField(default=False, verbose_name='KP')),
                ('mba', models.BooleanField(default=False, verbose_name='MDA')),
                ('zdd', models.BooleanField(default=False, verbose_name='ZDD')),
                ('iri', models.BooleanField(default=False, verbose_name='IRI')),
                ('all_services', models.BooleanField(default=False, verbose_name='All services')),
                ('notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Notes')),
                ('exclusion', models.BooleanField(default=False, verbose_name='Exclusion')),
                ('work_type', models.CharField(choices=[('исключен', 'Исключен'), ('активен', 'Активен')], default='активен', max_length=16, verbose_name='The status of the place of work')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('street', models.CharField(blank=True, max_length=100, verbose_name='Street')),
                ('house', models.CharField(blank=True, max_length=50, verbose_name='House')),
                ('apartment', models.CharField(blank=True, max_length=50, null=True, verbose_name='Apartment')),
                ('ticket_expiration', models.DateField(null=True, verbose_name='Expiration date')),
                ('email_send', models.BooleanField(default=True, verbose_name='Is expired')),
                ('reregistration_dates', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Registration dates')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kuser.Department', verbose_name='Department')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='kuser.Organization', verbose_name='Organization')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readers_position', to='kuser.Position', verbose_name='Position')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reader', to=settings.AUTH_USER_MODEL, verbose_name='Account')),
            ],
            options={
                'verbose_name': 'Reader',
                'verbose_name_plural': 'Readers',
            },
        ),
        migrations.CreateModel(
            name='OtherNaturalPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Changed')),
                ('registration_date', models.DateField(max_length=10, verbose_name='Registration date')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='Middle name')),
                ('birth_date', models.DateField(blank=True, max_length=10, null=True, verbose_name='Date of birth')),
                ('education', models.CharField(choices=[('general-average', 'Общее среднее'), ('secondary_special', 'Средне-специальное'), ('higher', 'Высшее'), ('vocational-training', 'Профессионально-техническое')], max_length=30, verbose_name='Education')),
                ('id_number', models.CharField(max_length=50, verbose_name='Id number')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone')),
                ('library', models.CharField(choices=[('Scientific and Technical Library', 'Научно-техническая библиотека'), ('Technical Library of the Minsk Branch', 'Техническая библиотека Минского отделения'), ('Technical Library of the Baranovichi branch', 'Техническая библиотека Барановичского отделения'), ('Technical Library of the Brest branch', 'Техническая библиотека Брестского отделения'), ('Technical Library of the Gomel branch', 'Техническая библиотека Гомельского отделения'), ('Technical Library of the Mogilev branch', 'Техническая библиотека Могилевского отделения'), ('Technical Library of the Vitebsk Branch', 'Техническая библиотека Витебского отделения'), ('Orsha Library Point', 'Библиотечный пункт Орша'), ('Library point Molodechno', 'Библиотечный пункт Молодечно'), ('Luninets Library Point', 'Библиотечный пункт Лунинец'), ('Library point Volkovysk', 'Библиотечный пункт Волковыск'), ('Library point of the Brest Locomotive Depot', 'Библиотечный пункт Локомотивного депо Брест'), ('Zhlobin Library Point', 'Библиотечный пункт Жлобин'), ('Kalinkovichi Library Point', 'Библиотечный пункт Калинковичи'), ('Osipovichi Library Point', 'Библиотечный пункт Осиповичи'), ('Polotsk Library Center', 'Библиотечный пункт Полоцк')], max_length=75, verbose_name='Library')),
                ('subscriber', models.BooleanField(default=False, verbose_name='Subscriber')),
                ('reading_room', models.BooleanField(default=False, verbose_name='Reading room')),
                ('kp', models.BooleanField(default=False, verbose_name='KP')),
                ('mba', models.BooleanField(default=False, verbose_name='MDA')),
                ('zdd', models.BooleanField(default=False, verbose_name='ZDD')),
                ('iri', models.BooleanField(default=False, verbose_name='IRI')),
                ('all_services', models.BooleanField(default=False, verbose_name='All services')),
                ('notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Notes')),
                ('exclusion', models.BooleanField(default=False, verbose_name='Exclusion')),
                ('validity_period', models.DateField(blank=True, max_length=10, null=True, verbose_name='Validity period')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('street', models.CharField(blank=True, max_length=100, verbose_name='Street')),
                ('house', models.CharField(blank=True, max_length=50, verbose_name='House')),
                ('apartment', models.CharField(blank=True, max_length=50, null=True, verbose_name='Apartment')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='other_natural_person', to=settings.AUTH_USER_MODEL, verbose_name='Account')),
            ],
            options={
                'verbose_name': 'Other natural person',
                'verbose_name_plural': 'Other natural person',
            },
        ),
        migrations.CreateModel(
            name='ReaderFirstClass',
            fields=[
            ],
            options={
                'verbose_name': 'Reader',
                'verbose_name_plural': 'Readers',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('kuser.reader',),
        ),
    ]
